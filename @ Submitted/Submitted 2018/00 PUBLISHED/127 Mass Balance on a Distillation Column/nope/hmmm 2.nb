(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     35677,        815]
NotebookOptionsPosition[     34791,        791]
NotebookOutlinePosition[     35134,        806]
CellTagsIndexPosition[     35091,        803]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "unknowns", ",", "zF", ",", "feed", ",", "xB", ",", "bottoms", ",", 
       "xD", ",", "distillate", ",", "sol"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "reset", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"unknowns", "=", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "zF", ",", "feed", ",", "xD", ",", "distillate", ",", "xB", ",", 
           "bottoms"}], "}"}], ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "zF"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xD"}], "]"}]}], ")"}], "\[Or]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "zF"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xB"}], "]"}]}], ")"}], "\[Or]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xD"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xB"}], "]"}]}], ")"}]}], ",", 
        RowBox[{"reset", "=", 
         RowBox[{"reset", "+", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"unknowns", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
         RowBox[{"unknowns", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{"reset", "=", 
         RowBox[{"reset", "+", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"zF", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "zF"}], "]"}], ",", "zF", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "6"}], "}"}], "]"}]}], "/", "10"}]}], "]"}]}], 
      ";", 
      RowBox[{"feed", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "feed"}], "]"}], ",", "feed", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"100", ",", "200"}], "}"}], "]"}]}], "/", "10"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"xB", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xB"}], "]"}], ",", "xB", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"5", ",", "15"}], "}"}], "]"}]}], "/", "100"}]}], 
        "]"}]}], ";", 
      RowBox[{"bottoms", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "bottoms"}], "]"}], ",", "bottoms", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"5", ",", "15"}], "}"}], "]"}]}], "/", "10"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"xD", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xD"}], "]"}], ",", "xD", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"80", ",", "95"}], "}"}], "]"}]}], "/", "100"}]}], 
        "]"}]}], ";", 
      RowBox[{"distillate", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "distillate"}], "]"}], ",", "distillate", 
         ",", 
         RowBox[{"feed", "-", "bottoms"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"sol", "=", 
       RowBox[{"Quiet", "@", 
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"zF", "*", "feed"}], "\[Equal]", 
             RowBox[{
              RowBox[{"xD", "*", "distillate"}], "+", 
              RowBox[{"xB", "*", "bottoms"}]}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"feed", "\[Equal]", 
             RowBox[{"distillate", "+", "bottoms"}]}]}], 
           "\[IndentingNewLine]", "}"}], ",", "unknowns"}], "]"}]}]}], ";", 
      RowBox[{"{", 
       RowBox[{"unknowns", ",", "sol"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Grid", "@", 
    RowBox[{"{", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Button", "[", 
        RowBox[{"\"\< new problem \>\"", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reset", "<", "1000"}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "+", "1"}]}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "-", "1"}]}]}], "]"}]}], "]"}], ",", 
       "SpanFromLeft", ",", "\[IndentingNewLine]", 
       RowBox[{"Control", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"reset", ",", "1"}], "}"}], ",", "1", ",", "1000", ",", 
          "1", ",", "None"}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7332339513338537`*^9, 3.7332341385822*^9}, {
   3.7332348518071575`*^9, 3.7332348672054405`*^9}, 3.7332349803640776`*^9, {
   3.733235729569949*^9, 3.733235746488245*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b5dd96b4-ea8c-4517-9591-ee36a835d0e7"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{CloudObject`Private`reset$$ = 7, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[CloudObject`Private`reset$$], 1}, 1, 1000, 1}, {
      Hold[
       Grid[{{
          Button[" new problem ", 
           If[
           CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
          Manipulate`Place[1]}}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {506., {3., 9.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    CloudObject`Private`reset$10525$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, "Variables" :> {CloudObject`Private`reset$$ = 1}, 
      "ControllerVariables" :> {
        Hold[
        CloudObject`Private`reset$$, CloudObject`Private`reset$10525$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{CloudObject`Private`unknowns$, CloudObject`Private`zF$, 
         CloudObject`Private`feed$, CloudObject`Private`xB$, 
         CloudObject`Private`bottoms$, CloudObject`Private`xD$, 
         CloudObject`Private`distillate$, CloudObject`Private`sol$}, 
        SeedRandom[CloudObject`Private`reset$$]; 
        CloudObject`Private`unknowns$ = 
         RandomChoice[{
           CloudObject`Private`zF$, CloudObject`Private`feed$, 
            CloudObject`Private`xD$, CloudObject`Private`distillate$, 
            CloudObject`Private`xB$, CloudObject`Private`bottoms$}, 2]; If[
          Or[
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zF$], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xD$]], 
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zF$], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xB$]], 
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xD$], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xB$]]],
           CloudObject`Private`reset$$ = CloudObject`Private`reset$$ + 1]; 
        If[Part[CloudObject`Private`unknowns$, 1] == 
          Part[CloudObject`Private`unknowns$, 2], CloudObject`Private`reset$$ = 
          CloudObject`Private`reset$$ + 1]; CloudObject`Private`zF$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zF$], 
           CloudObject`Private`zF$, N[
             RandomInteger[{1, 6}]]/10]; CloudObject`Private`feed$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`feed$], 
           CloudObject`Private`feed$, N[
             RandomInteger[{100, 200}]]/10]; CloudObject`Private`xB$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xB$], 
           CloudObject`Private`xB$, N[
             RandomInteger[{5, 15}]]/100]; CloudObject`Private`bottoms$ = If[
           MemberQ[
           CloudObject`Private`unknowns$, CloudObject`Private`bottoms$], 
           CloudObject`Private`bottoms$, N[
             RandomInteger[{5, 15}]]/10]; CloudObject`Private`xD$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xD$], 
           CloudObject`Private`xD$, N[
             RandomInteger[{80, 95}]]/100]; 
        CloudObject`Private`distillate$ = If[
           MemberQ[
           CloudObject`Private`unknowns$, CloudObject`Private`distillate$], 
           CloudObject`Private`distillate$, CloudObject`Private`feed$ - 
           CloudObject`Private`bottoms$]; CloudObject`Private`sol$ = Quiet[
           
           Solve[{CloudObject`Private`zF$ CloudObject`Private`feed$ == 
             CloudObject`Private`xD$ CloudObject`Private`distillate$ + 
              CloudObject`Private`xB$ CloudObject`Private`bottoms$, 
             CloudObject`Private`feed$ == 
             CloudObject`Private`distillate$ + CloudObject`Private`bottoms$}, 
            CloudObject`Private`unknowns$]]; {
         CloudObject`Private`unknowns$, CloudObject`Private`sol$}], 
      "Specifications" :> {{{CloudObject`Private`reset$$, 1}, 1, 1000, 1, 
         ControlType -> None, ControlPlacement -> 1}, 
        Grid[{{
           Button[" new problem ", 
            If[
            CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
           Manipulate`Place[1]}}]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{557., {53., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7332340729554405`*^9, 3.733234139281393*^9}, {
   3.7332348550186777`*^9, 3.733234868010093*^9}, 3.733235747662228*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"f6c461f2-64c0-4223-af45-892a69a616ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "unknowns", ",", "zF", ",", "feed", ",", "xB", ",", "bottoms", ",", 
       "xD", ",", "distillate", ",", "sol", ",", "column"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "reset", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"unknowns", "=", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"zf", ",", "f", ",", "xd", ",", "d", ",", "xb", ",", "b"}], 
          "}"}], ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "zf"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xd"}], "]"}]}], ")"}], "\[Or]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "zf"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xb"}], "]"}]}], ")"}], "\[Or]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xd"}], "]"}], "\[And]", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"unknowns", ",", "xb"}], "]"}]}], ")"}]}], ",", 
        RowBox[{"reset", "=", 
         RowBox[{"reset", "+", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"unknowns", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
         RowBox[{"unknowns", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{"reset", "=", 
         RowBox[{"reset", "+", "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"zF", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "zF"}], "]"}], ",", "zf", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "6"}], "}"}], "]"}]}], "/", "10"}]}], "]"}]}], 
      ";", 
      RowBox[{"feed", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "feed"}], "]"}], ",", "f", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"100", ",", "200"}], "}"}], "]"}]}], "/", "10"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"xB", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xB"}], "]"}], ",", "xb", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"5", ",", "15"}], "}"}], "]"}]}], "/", "100"}]}], 
        "]"}]}], ";", 
      RowBox[{"bottoms", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "bottoms"}], "]"}], ",", "b", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"5", ",", "15"}], "}"}], "]"}]}], "/", "10"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"xD", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xD"}], "]"}], ",", "xd", ",", 
         RowBox[{
          RowBox[{"N", "@", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"80", ",", "95"}], "}"}], "]"}]}], "/", "100"}]}], 
        "]"}]}], ";", 
      RowBox[{"distillate", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "distillate"}], "]"}], ",", "d", ",", 
         RowBox[{"feed", "-", "bottoms"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"sol", "=", 
       RowBox[{"Quiet", "@", 
        RowBox[{
         RowBox[{"Solve", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"unknowns", ",", "zf"}], "]"}], ",", "zf", ",", 
                 "zF"}], "]"}], "*", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"unknowns", ",", "f"}], "]"}], ",", "f", ",", 
                 "feed"}], "]"}]}], "\[Equal]", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"unknowns", ",", "xd"}], "]"}], ",", "xd", ",", 
                  "xD"}], "]"}], "*", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"unknowns", ",", "d"}], "]"}], ",", "d", ",", 
                  "distillate"}], "]"}]}], "+", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"unknowns", ",", "xb"}], "]"}], ",", "xb", ",", 
                  "xB"}], "]"}], "*", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"unknowns", ",", "b"}], "]"}], ",", "b", ",", 
                  "bottoms"}], "]"}]}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"unknowns", ",", "f"}], "]"}], ",", "f", ",", 
                "feed"}], "]"}], "\[Equal]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"unknowns", ",", "d"}], "]"}], ",", "d", ",", 
                 "distillate"}], "]"}], "+", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"unknowns", ",", "b"}], "]"}], ",", "b", ",", 
                 "bottoms"}], "]"}]}]}]}], "\[IndentingNewLine]", "}"}], ",", 
           "unknowns"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"unknowns", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=", 
        RowBox[{
         RowBox[{"unknowns", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/.", "sol"}]}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"zF", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "zf"}], "]"}], ",", 
         RowBox[{"zf", "/.", "sol"}], ",", "zF"}], "]"}]}], ";", 
      RowBox[{"feed", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "f"}], "]"}], ",", 
         RowBox[{"f", "/.", "sol"}], ",", "feed"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xB", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xb"}], "]"}], ",", 
         RowBox[{"xb", "/.", "sol"}], ",", "xB"}], "]"}]}], ";", 
      RowBox[{"bottoms", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "b"}], "]"}], ",", 
         RowBox[{"b", "/.", "sol"}], ",", "bottoms"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xD", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "xd"}], "]"}], ",", 
         RowBox[{"xd", "/.", "sol"}], ",", "xD"}], "]"}]}], ";", 
      RowBox[{"distillate", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"unknowns", ",", "d"}], "]"}], ",", 
         RowBox[{"d", "/.", "sol"}], ",", "distillate"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"column", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], 
        "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Grid", "@", 
    RowBox[{"{", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Button", "[", 
        RowBox[{"\"\< new problem \>\"", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reset", "<", "1000"}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "+", "1"}]}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "-", "1"}]}]}], "]"}]}], "]"}], ",", 
       "SpanFromLeft", ",", "\[IndentingNewLine]", 
       RowBox[{"Control", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"reset", ",", "1"}], "}"}], ",", "1", ",", "1000", ",", 
          "1", ",", "None"}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733235124508301*^9, 3.733235331742132*^9}, {
  3.733235384409658*^9, 3.7332354948874235`*^9}, {3.733235689661909*^9, 
  3.7332357031733737`*^9}, {3.7332358043909607`*^9, 3.7332358470192137`*^9}, {
  3.7332358774838576`*^9, 
  3.7332360722084103`*^9}},ExpressionUUID->"abf8c64f-7e73-47c3-b42c-\
8c846d50fcba"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{CloudObject`Private`reset$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[CloudObject`Private`reset$$], 1}, 1, 1000, 1}, {
      Hold[
       Grid[{{
          Button[" new problem ", 
           If[
           CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
          Manipulate`Place[1]}}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {274., {3., 9.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    CloudObject`Private`reset$11711$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, "Variables" :> {CloudObject`Private`reset$$ = 1}, 
      "ControllerVariables" :> {
        Hold[
        CloudObject`Private`reset$$, CloudObject`Private`reset$11711$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{CloudObject`Private`unknowns$, CloudObject`Private`zF$, 
         CloudObject`Private`feed$, CloudObject`Private`xB$, 
         CloudObject`Private`bottoms$, CloudObject`Private`xD$, 
         CloudObject`Private`distillate$, CloudObject`Private`sol$}, 
        SeedRandom[CloudObject`Private`reset$$]; 
        CloudObject`Private`unknowns$ = 
         RandomChoice[{
           CloudObject`Private`zf, CloudObject`Private`f, 
            CloudObject`Private`xd, CloudObject`Private`d, 
            CloudObject`Private`xb, CloudObject`Private`b}, 2]; If[
          Or[
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zf], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xd]], 
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zf], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xb]], 
           And[
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xd], 
            MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xb]]], 
          CloudObject`Private`reset$$ = CloudObject`Private`reset$$ + 1]; 
        If[Part[CloudObject`Private`unknowns$, 1] == 
          Part[CloudObject`Private`unknowns$, 2], CloudObject`Private`reset$$ = 
          CloudObject`Private`reset$$ + 1]; CloudObject`Private`zF$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zF$], 
           CloudObject`Private`zf, N[
             RandomInteger[{1, 6}]]/10]; CloudObject`Private`feed$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`feed$], 
           CloudObject`Private`f, N[
             RandomInteger[{100, 200}]]/10]; CloudObject`Private`xB$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xB$], 
           CloudObject`Private`xb, N[
             RandomInteger[{5, 15}]]/100]; CloudObject`Private`bottoms$ = If[
           MemberQ[
           CloudObject`Private`unknowns$, CloudObject`Private`bottoms$], 
           CloudObject`Private`b, N[
             RandomInteger[{5, 15}]]/10]; CloudObject`Private`xD$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xD$], 
           CloudObject`Private`xd, N[
             RandomInteger[{80, 95}]]/100]; 
        CloudObject`Private`distillate$ = If[
           MemberQ[
           CloudObject`Private`unknowns$, CloudObject`Private`distillate$], 
           CloudObject`Private`d, CloudObject`Private`feed$ - 
           CloudObject`Private`bottoms$]; CloudObject`Private`sol$ = Quiet[
           Part[
            Solve[{If[
                 MemberQ[
                 CloudObject`Private`unknowns$, CloudObject`Private`zf], 
                 CloudObject`Private`zf, CloudObject`Private`zF$] If[
                 MemberQ[
                 CloudObject`Private`unknowns$, CloudObject`Private`f], 
                 CloudObject`Private`f, CloudObject`Private`feed$] == If[
                  MemberQ[
                  CloudObject`Private`unknowns$, CloudObject`Private`xd], 
                  CloudObject`Private`xd, CloudObject`Private`xD$] If[
                  MemberQ[
                  CloudObject`Private`unknowns$, CloudObject`Private`d], 
                  CloudObject`Private`d, CloudObject`Private`distillate$] + If[
                  MemberQ[
                  CloudObject`Private`unknowns$, CloudObject`Private`xb], 
                  CloudObject`Private`xb, CloudObject`Private`xB$] If[
                  MemberQ[
                  CloudObject`Private`unknowns$, CloudObject`Private`b], 
                  CloudObject`Private`b, CloudObject`Private`bottoms$], If[
                MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`f],
                 CloudObject`Private`f, CloudObject`Private`feed$] == If[
                 MemberQ[
                 CloudObject`Private`unknowns$, CloudObject`Private`d], 
                 CloudObject`Private`d, CloudObject`Private`distillate$] + If[
                 MemberQ[
                 CloudObject`Private`unknowns$, CloudObject`Private`b], 
                 CloudObject`Private`b, CloudObject`Private`bottoms$]}, 
             CloudObject`Private`unknowns$], 1]]; CloudObject`Private`zF$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`zf], 
           ReplaceAll[CloudObject`Private`zf, CloudObject`Private`sol$], 
           CloudObject`Private`zF$]; CloudObject`Private`feed$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`f], 
           ReplaceAll[CloudObject`Private`f, CloudObject`Private`sol$], 
           CloudObject`Private`feed$]; CloudObject`Private`xB$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xb], 
           ReplaceAll[CloudObject`Private`xb, CloudObject`Private`sol$], 
           CloudObject`Private`xB$]; CloudObject`Private`bottoms$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`b], 
           ReplaceAll[CloudObject`Private`b, CloudObject`Private`sol$], 
           CloudObject`Private`bottoms$]; CloudObject`Private`xD$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`xd], 
           ReplaceAll[CloudObject`Private`xd, CloudObject`Private`sol$], 
           CloudObject`Private`xD$]; CloudObject`Private`distillate$ = If[
           MemberQ[CloudObject`Private`unknowns$, CloudObject`Private`d], 
           ReplaceAll[CloudObject`Private`d, CloudObject`Private`sol$], 
           CloudObject`Private`distillate$]; {
         CloudObject`Private`zF$, CloudObject`Private`feed$, 
          CloudObject`Private`xD$, CloudObject`Private`distillate$, 
          CloudObject`Private`xB$, CloudObject`Private`bottoms$}], 
      "Specifications" :> {{{CloudObject`Private`reset$$, 1}, 1, 1000, 1, 
         ControlType -> None, ControlPlacement -> 1}, 
        Grid[{{
           Button[" new problem ", 
            If[
            CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
           Manipulate`Place[1]}}]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{325., {53., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7332351117272973`*^9, 3.733235182373661*^9, 3.73323523905779*^9, 
   3.7332353321175327`*^9, 3.733235497706007*^9, 3.7332357037138596`*^9, {
   3.733235808805459*^9, 3.7332358477255373`*^9}, 3.7332359024099803`*^9, 
   3.733236009083555*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"41533058-0c8a-4c04-b0bf-806e48610196"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "parts", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "reset", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"parts", "=", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "6"}], "}"}], ",", "2"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Grid", "@", 
    RowBox[{"{", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Button", "[", 
        RowBox[{"\"\< new problem \>\"", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reset", "<", "1000"}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "+", "1"}]}], ",", 
           RowBox[{"reset", "=", 
            RowBox[{"reset", "-", "1"}]}]}], "]"}]}], "]"}], ",", 
       "SpanFromLeft", ",", "\[IndentingNewLine]", 
       RowBox[{"Control", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"reset", ",", "1"}], "}"}], ",", "1", ",", "1000", ",", 
          "1", ",", "None"}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.733235624526905*^9, 3.733235648598177*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"bceb3a06-6aca-4608-ad12-85982e975fbf"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{CloudObject`Private`reset$$ = 6, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[CloudObject`Private`reset$$], 1}, 1, 1000, 1}, {
      Hold[
       Grid[{{
          Button[" new problem ", 
           If[
           CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
            CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
          Manipulate`Place[1]}}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {41., {3., 9.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    CloudObject`Private`reset$10018$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, "Variables" :> {CloudObject`Private`reset$$ = 1}, 
      "ControllerVariables" :> {
        Hold[
        CloudObject`Private`reset$$, CloudObject`Private`reset$10018$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{CloudObject`Private`parts$}, 
        SeedRandom[CloudObject`Private`reset$$]; 
        CloudObject`Private`parts$ = RandomInteger[{1, 6}, 2]], 
      "Specifications" :> {{{CloudObject`Private`reset$$, 1}, 1, 1000, 1, 
         ControlType -> None, ControlPlacement -> 1}, 
        Grid[{{
           Button[" new problem ", 
            If[
            CloudObject`Private`reset$$ < 1000, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ + 1, CloudObject`Private`reset$$ = 
             CloudObject`Private`reset$$ - 1]], SpanFromLeft, 
           Manipulate`Place[1]}}]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{129., {53., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7332356490333757`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"254e6dbb-7c0a-4dcb-a8b1-35a077f6cd3f"]
}, Open  ]]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 6072, 157, 409, "Input",ExpressionUUID->"b5dd96b4-ea8c-4517-9591-ee36a835d0e7"],
Cell[6655, 181, 5664, 104, 131, "Output",ExpressionUUID->"f6c461f2-64c0-4223-af45-892a69a616ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12356, 290, 9860, 251, 580, "Input",ExpressionUUID->"abf8c64f-7e73-47c3-b42c-8c846d50fcba"],
Cell[22219, 543, 8438, 149, 131, "Output",ExpressionUUID->"41533058-0c8a-4c04-b0bf-806e48610196"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30694, 697, 1470, 36, 200, "Input",ExpressionUUID->"bceb3a06-6aca-4608-ad12-85982e975fbf"],
Cell[32167, 735, 2608, 53, 131, "Output",ExpressionUUID->"254e6dbb-7c0a-4dcb-a8b1-35a077f6cd3f"]
}, Open  ]]
}
]
*)

